<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netstandard2.1;net6.0;net8.0;net8.0-windows10.0.17763.0</TargetFrameworks>
  </PropertyGroup>

  <!--
    Windows-only properties (supporting AOT in WinRT scenarios requires actually using the Windows TFM,
    because we need the source generators in CsWinRT to generate the supporting interop code for AOT).
  -->
  <PropertyGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net8.0-windows10.0.17763.0'))">
    <WindowsSdkPackageVersion>10.0.17763.39</WindowsSdkPackageVersion>

    <!--
      We're only referencing CsWinRT for the source generators, we don't need to read any WinRT metadata.
      CsWinRT is in projection mode by default, so we want to disable it (or it'd need the Windows SDK).
    -->
    <CsWinRTGenerateProjection>false</CsWinRTGenerateProjection>

    <!-- We'll never have any IIDs to patch in this library -->
    <CsWinRTIIDOptimizerOptOut>true</CsWinRTIIDOptimizerOptOut>

    <!-- Enable AOT warnings for types implementing projected WinRT interfaces mapped to built-in types (eg. 'INotifyPropertyChanged') -->
    <CsWinRTAotWarningLevel>2</CsWinRTAotWarningLevel>
  </PropertyGroup>

  <PropertyGroup>
    <Title>.NET Community Toolkit - MVVM</Title>
    <Description>
      This package includes a .NET MVVM library with helpers such as:
      - ObservableObject: a base class for objects implementing the INotifyPropertyChanged interface.
      - ObservableRecipient: a base class for observable objects with support for the IMessenger service.
      - ObservableValidator: a base class for objects implementing the INotifyDataErrorInfo interface.
      - RelayCommand: a simple delegate command implementing the ICommand interface.
      - AsyncRelayCommand: a delegate command supporting asynchronous operations and cancellation.
      - WeakReferenceMessenger: a messaging system to exchange messages through different loosely-coupled objects.
      - StrongReferenceMessenger: a high-performance messaging system that trades weak references for speed.
      - Ioc: a helper class to configure dependency injection service containers.
    </Description>
    <PackageTags>MVVM;Toolkit;MVVMToolkit;INotifyPropertyChanged;Observable;IOC;DI;Dependency Injection;Object Messaging;Extensions;Helpers</PackageTags>
  </PropertyGroup>

  <!-- .NET Standard 2.0 doesn't have the Span<T> and IAsyncEnumerable<T> types -->
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="8.0.0" />
    <PackageReference Include="System.ComponentModel.Annotations" Version="5.0.0" />
    <PackageReference Include="System.Memory" Version="4.5.5" />
    <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
  </ItemGroup>

  <!-- .NET Standard 2.1 doesn't have the Unsafe type -->
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.1'">
    <PackageReference Include="System.ComponentModel.Annotations" Version="5.0.0" />
    <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
  </ItemGroup>

  <!-- Include the ILLink file (to properly trim configuration switches in publish builds) -->
  <ItemGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net6.0'))">
    <EmbeddedResource Include="Properties\ILLink.Substitutions.xml" LogicalName="ILLink.Substitutions.xml" />
  </ItemGroup>

  <!-- Reference CsWinRT when targeting Windows, to get the latest source generators -->
  <ItemGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net8.0-windows10.0.17763.0'))">
    <PackageReference Include="Microsoft.Windows.CsWinRT" Version="2.1.1" PrivateAssets="all" />
  </ItemGroup>

  <!-- Reference the various multi-targeted versions of the source generator project (one per Roslyn version), and the code fixer -->
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <ProjectReference Include="..\CommunityToolkit.Mvvm.SourceGenerators.Roslyn401\CommunityToolkit.Mvvm.SourceGenerators.Roslyn401.csproj" ReferenceOutputAssembly="false" />
    <ProjectReference Include="..\CommunityToolkit.Mvvm.SourceGenerators.Roslyn431\CommunityToolkit.Mvvm.SourceGenerators.Roslyn431.csproj" ReferenceOutputAssembly="false" />
    <ProjectReference Include="..\CommunityToolkit.Mvvm.CodeFixers\CommunityToolkit.Mvvm.CodeFixers.csproj" ReferenceOutputAssembly="false" />
  </ItemGroup>

  <!-- Add the [InternalsVisibleTo] attribute for the test project -->
  <ItemGroup>
    <InternalsVisibleTo Include="CommunityToolkit.Mvvm.Internals.UnitTests, PublicKey=$(AssemblySignPublicKey)" />
  </ItemGroup>

  <!-- Necessary polyfills -->
  <PropertyGroup>
    <PolySharpIncludeGeneratedTypes>
      System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute;
      System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute;
      System.Diagnostics.CodeAnalysis.MemberNotNullAttribute;
      System.Diagnostics.CodeAnalysis.NotNullAttribute;
      System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute;
      System.Diagnostics.CodeAnalysis.NotNullWhenAttribute;
      System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute;
      System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute;
      System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute;
      System.Runtime.CompilerServices.CallerArgumentExpressionAttribute;
      System.Runtime.CompilerServices.IsExternalInit;
      System.Runtime.CompilerServices.SkipLocalsInitAttribute;
    </PolySharpIncludeGeneratedTypes>
  </PropertyGroup>

  <ItemGroup Label="Package">

    <!-- .NET Standard 2.0 only needs the Roslyn validation .targets -->
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="buildTransitive\netstandard2.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="buildTransitive\netstandard2.0" Pack="true" />    
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="build\netstandard2.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="build\netstandard2.0" Pack="true" />

    <!-- .NET Standard 2.0 does the same -->
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="buildTransitive\netstandard2.1" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="buildTransitive\netstandard2.1" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="build\netstandard2.1" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="build\netstandard2.1" Pack="true" />
    
    <!-- .NET 6 also supports feature switches -->
    <None Include="CommunityToolkit.Mvvm.FeatureSwitches.targets" PackagePath="buildTransitive\net6.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="buildTransitive\net6.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="buildTransitive\net6.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.FeatureSwitches.targets" PackagePath="build\net6.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="build\net6.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="build\net6.0" Pack="true" />

    <!-- .NET 8 does the same as .NET 6 -->
    <None Include="CommunityToolkit.Mvvm.FeatureSwitches.targets" PackagePath="buildTransitive\net8.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="buildTransitive\net8.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="buildTransitive\net8.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.FeatureSwitches.targets" PackagePath="build\net8.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="build\net8.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="build\net8.0" Pack="true" />
    
    <!-- .NET 8 on Windows is the same as .NET 8 with respect to .targets -->
    <None Include="CommunityToolkit.Mvvm.FeatureSwitches.targets" PackagePath="buildTransitive\net8.0-windows10.0.17763.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="buildTransitive\net8.0-windows10.0.17763.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="buildTransitive\net8.0-windows10.0.17763.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.FeatureSwitches.targets" PackagePath="build\net8.0-windows10.0.17763.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.SourceGenerators.targets" PackagePath="build\net8.0-windows10.0.17763.0" Pack="true" />
    <None Include="CommunityToolkit.Mvvm.targets" PackagePath="build\net8.0-windows10.0.17763.0" Pack="true" />

    <!--
      Pack the source generator to the right package folders (each matching the target Roslyn version).
      Roslyn will automatically load the highest version compatible with Roslyn's version in the SDK.
      Also pack the code fixer along with each target analyzer, the multi-targeting take care of it.
      Note: the code fixer is not currently multi-targeting, as there are no Roslyn APIs it needs from
      versions later than 4.0.1. As such, we can just use a single project (without the shared project
      and two multi-targeted ones), and pack the resulting assembly twice along with the generators.
      Even though the fixer only references the 4.0.1 generator target, both versions export the same
      APIs that the code fixer project needs, and Roslyn versions are also forward compatible.
    -->
    <None Include="..\CommunityToolkit.Mvvm.SourceGenerators.Roslyn401\bin\$(Configuration)\netstandard2.0\CommunityToolkit.Mvvm.SourceGenerators.dll" PackagePath="analyzers\dotnet\roslyn4.0\cs" Pack="true" Visible="false" />
    <None Include="..\CommunityToolkit.Mvvm.SourceGenerators.Roslyn431\bin\$(Configuration)\netstandard2.0\CommunityToolkit.Mvvm.SourceGenerators.dll" PackagePath="analyzers\dotnet\roslyn4.3\cs" Pack="true" Visible="false" />
    <None Include="..\CommunityToolkit.Mvvm.CodeFixers\bin\$(Configuration)\netstandard2.0\CommunityToolkit.Mvvm.CodeFixers.dll" PackagePath="analyzers\dotnet\roslyn4.0\cs" Pack="true" Visible="false" />
    <None Include="..\CommunityToolkit.Mvvm.CodeFixers\bin\$(Configuration)\netstandard2.0\CommunityToolkit.Mvvm.CodeFixers.dll" PackagePath="analyzers\dotnet\roslyn4.3\cs" Pack="true" Visible="false" />
  </ItemGroup>

</Project>